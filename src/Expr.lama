-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[st, wrld], expr) {
  case expr of
    Assn(s, e)            -> 
        case evalList (c, {s, e}) of    
          [[st, wrld], {s, e}] -> [[st <- [s, e], wrld], e]
        esac
    | Seq     (s1, s2)    -> eval (eval (c, s1).fst, s2)
    | Skip                -> [c, Void]
    | Read    (s)         ->
        case readWorld (wrld) of 
          [v, wrld] -> [[st <- [s, v], wrld], Void] 
        esac
    | Write   (e)         ->
        case eval (c, e) of 
          [[st, wrld], v] -> [[st, writeWorld (v, wrld)], Void] 
        esac
    | If      (e, s1, s2) -> 
        case eval (c, e) of 
          [c, 1]   -> eval (c, s1)
          | [c, 0] -> eval (c, s2)
        esac
    | While   (e, s)      ->
        case eval (c, e) of 
          [c, 1] -> eval (eval (c, s).fst, expr)
          | [c, 0] -> [c, Void]
        esac
    | DoWhile (s, e)      -> 
        eval (eval (c, s).fst, While (e, s))
    | Var     (s)         -> [c, st (s)]
    | Ref     (s)         -> [c, s]
    | Const   (n)         -> [c, n]
    | Binop(op, a, b)     ->
        case evalList (c, {a, b}) of
          [c, {a, b}] -> [c, evalOp (op, a, b)]
        esac
    | Ignore  (e)         -> [eval (c, e).fst, Void]
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
