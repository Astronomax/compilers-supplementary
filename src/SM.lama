-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[st, sigma, wrld], insns) {
  if (insns == {}) then c else (
  var i = hd (insns);
  var restIns = tl (insns);
  case i of
    READ         -> 
      case readWorld(wrld) of 
       [v, nextwrld] -> eval (env, [v : st, sigma, nextwrld], restIns) 
      esac
  | WRITE        -> eval(env, [tl (st), sigma, writeWorld(hd (st), wrld)], restIns)
  | BINOP (op)    ->
    case st of
      (a : b : restSt) -> eval (env, [evalOp (op, b, a) : restSt, sigma, wrld], restIns)
    esac
  | LD    (x)    -> eval (env, [(sigma (x)) : st, sigma, wrld], restIns)
  | LDA   (x)    -> eval (env, [(x) : st, sigma, wrld], restIns)
  | ST    (x)    -> eval (env, [tl (st), sigma <- [x, hd (st)], wrld], restIns)
  | STI          -> 
    case st of (v : x : restSt) -> 
                    eval (env, [v:restSt, sigma <- [x, v], wrld], restIns)
    esac
  | CONST (n)    -> eval (env, [n : st, sigma, wrld], restIns)
  | LABEL (s)    -> eval (env, c, restIns)
  | JMP   (l)    -> eval (env, c, fromLabel (env, l))
  | CJMP (c, l) -> case c of
      "z" -> 
        case hd (st) of
          0 -> eval (env, [tl (st), sigma, wrld], fromLabel (env, l))
          | _ -> eval (env, [tl (st), sigma, wrld], restIns)
        esac
    | "nz" -> 
        case hd (st) of
          0 -> eval (env, [tl (st), sigma, wrld], restIns)
          | _ -> eval (env, [tl (st), sigma, wrld], fromLabel (env, l))
        esac
    esac
  | DUP          -> eval (env, [(hd (st)) : st, sigma, wrld], restIns)
  | DROP         -> eval (env, [tl (st), sigma, wrld], restIns)
  esac) fi
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip                -> [false, env, emptyBuffer ()]
    | Var     (x)         -> [false, env, singletonBuffer (LD (x))]
    | Ref     (x)         -> [false, env, singletonBuffer (LDA (x))]
    | Ignore  (e)         -> 
        case compile (lab, env, e) of 
          [used, env, code] -> [used, env, code <+ DROP]
        esac 
    | Const   (n)         -> [false, env, singletonBuffer (CONST (n))]
    | Binop (op, e1, e2) -> 
        case env.genLabels (2) of
          [e1Lab, e2Lab, env] ->
            case compile (e1Lab, env, e1) of 
              [e1Used, env, e1Code] -> 
                case compile (e2Lab, env, e2) of 
                  [e2Used, env, e2Code] -> [false, env, e1Code <+> label(e1Lab, e1Used) <+> e2Code <+> label(e2Lab, e2Used) <+ BINOP (op)] 
                esac
            esac  
        esac
    | Read    (x)         -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write   (e)         -> 
      case env.genLabel of
        [writeLab, env] -> 
          case compile (writeLab, env, e) of
            [writeUsed, env, eCode] -> [false, env, eCode <+> label(writeLab, writeUsed) <+ WRITE]
          esac
      esac
    | Assn  (s, e)        ->
      case env.genLabels (2) of
        [sLab, eLab, env] -> 
          case compile(sLab, env, s) of
            [sUsed, env, sCode] -> 
            case compile(eLab, env, e) of 
              [eUsed, env, eCode] -> [false, env, sCode <+> label(sLab, sUsed) <+> eCode <+> label(eLab, eUsed) <+ STI]
            esac
          esac
      esac
    | Seq     (s1, s2)    ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2Used, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2Used) <+> s2Code]
                  esac
             esac
        esac
    | If      (e, s1, s2) -> 
        case env.genLabels (2) of
          [s2Lab, cjmpLab, env] ->
            case compile (lab, env, s1) of
              [_, env, s1Code] ->
                case compile (lab, env, s2) of
                  [_, env, s2Code] -> 
                    case compile (cjmpLab, env, e) of
                      [cjmpUsed, env, eCode] -> [true, env, eCode <+> label(cjmpLab, cjmpUsed) <+ CJMP("z", s2Lab) <+> s1Code <+ JMP (lab) <+ LABEL (s2Lab) <+> s2Code]
                    esac
                esac
            esac
        esac
    | While   (e, s)      -> 
        case env.genLabels (3) of
          [sLab, eLab, cjmpLab, env] ->
            case compile (eLab, env, s) of
              [_, env, sCode] -> 
                case compile (cjmpLab, env, e) of
                  [used, env, eCode] -> [false, env, singletonBuffer (JMP (eLab)) <+ LABEL (sLab) <+> sCode <+ LABEL (eLab) <+> eCode <+> label(cjmpLab, used) <+ CJMP ("nz", sLab)]
                esac
            esac
        esac    
    | DoWhile (s, e)      ->
        case env.genLabels (3) of
          [sLab, eLab, cjmpLab, env] ->
            case compile (eLab, env, s) of
              [eLabUsed, env, sCode] -> 
                case compile (cjmpLab, env, e) of
                  [used, env, eCode] -> [false, env, singletonBuffer (LABEL (sLab)) <+> sCode <+> label (eLab, eLabUsed) <+> eCode <+> label(cjmpLab, used) <+ CJMP ("nz", sLab)]
                esac
            esac
        esac
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}