-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[st, sigma, wrld], instr) {
  if (instr == {}) then c else (
  var i = hd (instr);
  var restInstr = tl (instr);
  case i of
    READ      -> 
      case readWorld(wrld) of 
       [v, nextwrld] -> eval ([v : st, sigma, nextwrld], restInstr) 
      esac
  | WRITE     -> eval([tl (st), sigma, writeWorld(hd (st), wrld)], restInstr)
  | BINOP (s) ->
    case st of
      (a : b : restSt) -> eval ([(case s of
          "+" -> b + a
        | "-" -> b - a
        | "*" -> b * a
        | "/" -> b / a
        | "%" -> b % a
        | "<" -> b < a
        | "<=" -> b <= a
        | ">" -> b > a
        | ">=" -> b >= a
        | "==" -> b == a
        | "!=" -> b != a
        | "!!" -> b !! a
        | "&&" -> b && a
        esac) : restSt, sigma, wrld], restInstr)
    esac
  | LD    (x) -> eval ([(sigma (x)) : st, sigma, wrld], restInstr)
  | ST    (x) -> eval ([tl (st), sigma <- [x, hd (st)], wrld], restInstr)
  | CONST (n) -> eval ([n : st, sigma, wrld], restInstr)
  esac 
  ) fi
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of 
      Var(y) -> {LD (y)}
    | Const(x) -> {CONST (x)}
    | Binop(s, e1, e2) -> compileExpr (e1) +++ compileExpr (e2) +++ {BINOP (s)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
      Assn(s, e) -> compileExpr (e) +++ {ST (s)}
    | Seq(s1, s2) -> compileSM (s1) +++ compileSM (s2)
    | Skip -> {}
    | Read(s) -> {READ, ST (s)}
    | Write(e) -> compileExpr(e) +++ {WRITE}
  esac
}
