-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }


  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[st, cst, sigma, wrld], insns) {
    if (insns == {}) then c else (
      var i = hd (insns);
      var restIns = tl (insns);
      case i of 
        BINOP     (op)      ->
            case st of
              (a : b : restSt) -> eval ([evalOp (op, b, a) : restSt, cst, sigma, wrld], restIns)
            esac
        | LD      (x)       -> eval ([(lookup(sigma, x)) : st, cst, sigma, wrld], restIns)
        | LDA     (x)       -> eval ([(x) : st, cst, sigma, wrld], restIns)
        | ST      (x)       -> 
            assign(sigma, x, hd (st)); 
            eval ([tl (st), cst, sigma, wrld], restIns)
        | STI               -> 
          case st of (v : x : restSt) -> 
            assign(sigma, x, v); 
            eval ([v:restSt, cst, sigma, wrld], restIns)
          esac
        | SEXP    (name, n) ->
          case take (st, n) of
            [st, items] -> eval ([Sexp (name, listArray (items)) : tl (st), cst, sigma, wrld], restIns)
          esac
        | CONST   (n)       -> eval ([n : st, cst, sigma, wrld], restIns)
        | LABEL   (_)       -> eval(c, restIns) 
        | JMP     (l)       -> eval (c, fromLabel (env, l))
        | CJMP    (c, l)    -> case c of
            "z" -> 
              case hd (st) of
                0 -> eval ([tl (st), cst, sigma, wrld], fromLabel (env, l))
                | _ -> eval ([tl (st), cst, sigma, wrld], restIns)
              esac
          | "nz" -> 
              case hd (st) of
                0 -> eval ([tl (st), cst, sigma, wrld], restIns)
                | _ -> eval ([tl (st), cst, sigma, wrld], fromLabel (env, l))
              esac
          esac
        | CALL    (f, _)    -> eval([st, [sigma, restIns]:cst, sigma, wrld], fromLabel(env, f))
        | BEGIN   (f, a, l) ->
          case take(st, a) of
            [restSt, args] ->
              sigma := makeState(a, l);
              foldl(fun (i, x) {
                assign(sigma, Arg (i), x);
                i + 1
              }, 0, args);
              eval([restSt, cst, sigma, wrld], restIns)
          esac
        | GLOBAL  (x)       -> 
            assign(sigma, Glb(x), 0); 
            eval([st, cst, sigma, wrld], restIns)
        | END               -> 
          case cst of 
            {} -> c 
            | [sigma, restIns] : restCst -> eval([st, restCst, sigma, wrld], restIns)
          esac 
        | DUP               -> eval ([(hd (st)) : st, cst, sigma, wrld], restIns)
        | DROP              -> eval ([tl (st), cst, sigma, wrld], restIns)
        | STRING  (s)       -> eval([s : st, cst, sigma, wrld], restIns)
        | ARRAY   (n)       ->
          case take (st, n) of
            [st, items] -> eval ([listArray (items) : tl (st), cst, sigma, wrld], restIns)
          esac
        | STA               ->
          case st of
            v : i : arr : st ->
              case arr of
                Sexp (_, arr) -> arr[i] := v; eval ([v : st, cst, sigma, wrld], restIns)
              | _ -> arr[i] := v; eval ([v : st, cst, sigma, wrld], restIns)
              esac
          esac
        | ELEM              ->
          case st of
            i : arr : st ->
              case arr of
                Sexp(_, arr) -> eval([arr[i] : st, cst, sigma, wrld], restIns)
              | _ -> eval([arr[i] : st, cst, sigma, wrld], restIns)
              esac
          esac
        | BUILTIN (f, an)   ->
          case take (st, an) of
            [st, args] ->
              case evalBuiltin (f, args, wrld) of
                [res, wrld] -> eval ([res : st, cst, sigma, wrld], restIns)
              esac
          esac
      esac) fi
  }
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | Arg (i) -> Arg (i)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun addDefs(env, defs) {
    foldl(fun ([code, env], def) {
      case def of 
        Var (vars) -> 
          [if isGlobal(env) then 
            foldl(fun (code, var_) { code <+ GLOBAL (var_) }, code, vars) 
          else code fi, addVars(env, vars)]
        | Fun (name, args, body) -> 
          case genFunLabel(env, name) of 
            [fLab, env] -> [code, addFun(env, name, fLab, size(args))]
          esac
      esac
    }, [emptyBuffer(), env], defs)
  }

  fun rememberFunsForCompile(env, defs) {
    foldl(fun (env, def) {
      case def of  
        Fun (name, args, body) -> 
          case lookupFun(env, name) of 
            Fun(fLab, _) -> rememberFun(env, fLab, args, body)
          esac 
        | _ -> env
      esac
    }, env, defs)
  }

  fun compileFunsOnCurrentDepth(funs, env) {
    foldl(fun ([code, env],  Fun (fLab, args, body, state)) { 
      case genLabel(addArgs(beginFun(env, state), args)) of 
        [fEndLabel, env] -> 
          case compile(fEndLabel, env, body) of
            [fEndLabelUsed, env, fCode] -> [code <+ LABEL (fLab) <+ BEGIN (fLab, size(args), getLocals(env)) <+> fCode <+> label(fEndLabel, fEndLabelUsed) <+ END, leaveScope(env)]
          esac 
      esac 
    }, [emptyBuffer(), env], funs)
  }

  fun compileFuns(env) {
    case getFuns(env) of 
      [{}, env] -> [emptyBuffer(), env] 
      | [funs, env] -> 
        case compileFunsOnCurrentDepth(funs, env) of 
          [currentDepthCode, env] -> 
            case compileFuns(env) of 
              [nextDepthCode, env] -> [currentDepthCode <+> nextDepthCode, env]
            esac 
        esac
    esac        
  }

  fun compileList(env, stmts) {
    foldr (fun ([_, env, code], stmt) { 
      case genLabel(env) of 
        [lab, env] -> 
          case compile(lab, env, stmt) of
            [labUsed, env, stmtCode] -> [false, env, stmtCode <+> label(lab, labUsed) <+> code]
          esac 
      esac 
    }, [false, env, emptyBuffer()], stmts)
  }

  fun compile (lab, env, stmt) {
    case stmt of
      Skip                  -> [false, env, emptyBuffer ()]
    | Var     (x)           -> [false, env, singletonBuffer (LD (lookupVar(env, x)))]
    | Ref     (x)           -> [false, env, singletonBuffer (LDA (lookupVar(env, x)))]
    | Ignore  (e)           ->
      case genLabel (env) of
        [dropLab, env] ->
          case compile (dropLab, env, e) of 
            [dropUsed, env, code] -> [false, env, code <+> label (dropLab, dropUsed) <+ DROP]
          esac
      esac
    | Const   (n)           -> [false, env, singletonBuffer (CONST (n))]
    | Binop   (op, e1, e2)  ->
        case env.genLabels (2) of
          [e1Lab, e2Lab, env] ->
            case compile (e1Lab, env, e1) of 
              [e1Used, env, e1Code] -> 
                case compile (e2Lab, env, e2) of 
                  [e2Used, env, e2Code] -> [false, env, e1Code <+> label(e1Lab, e1Used) <+> e2Code <+> label(e2Lab, e2Used) <+ BINOP (op)] 
                esac
            esac  
        esac
    | Assn    (s, e)        ->
      case env.genLabels (2) of
        [sLab, eLab, env] -> 
          case compile(sLab, env, s) of
            [sUsed, env, sCode] -> 
            case compile(eLab, env, e) of 
              [eUsed, env, eCode] -> [false, env, sCode <+> label(sLab, sUsed) <+> eCode <+> label(eLab, eUsed) <+ (case s of ElemRef (_, _) -> STA | _ -> STI esac)]
            esac
          esac
      esac
    | Seq     (s1, s2)      ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2Used, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2Used) <+> s2Code]
                  esac
             esac
        esac
    | If      (e, s1, s2)   ->
        case env.genLabels (3) of
          [s2Lab, cjmpLab, jmpLab, env] ->
            case compile (lab, env, s1) of
              [jmpUsed, env, s1Code] ->
                case compile (lab, env, s2) of
                  [_, env, s2Code] -> 
                    case compile (cjmpLab, env, e) of
                      [cjmpUsed, env, eCode] -> [true, env, eCode <+> label(cjmpLab, cjmpUsed) <+ CJMP("z", s2Lab) <+> s1Code <+> label(jmpLab, jmpUsed) <+ JMP (lab) <+ LABEL (s2Lab) <+> s2Code]
                    esac
                esac
            esac
        esac
    | While   (e, s)        -> 
        case env.genLabels (3) of
          [sLab, eLab, cjmpLab, env] ->
            case compile (eLab, env, s) of
              [_, env, sCode] -> 
                case compile (cjmpLab, env, e) of
                  [used, env, eCode] -> [false, env, singletonBuffer (JMP (eLab)) <+ LABEL (sLab) <+> sCode <+ LABEL (eLab) <+> eCode <+> label(cjmpLab, used) <+ CJMP ("nz", sLab)]
                esac
            esac
        esac
    | DoWhile (s, e)        ->
        case env.genLabels (3) of
          [sLab, eLab, cjmpLab, env] ->
            case compile (eLab, env, s) of
              [eLabUsed, env, sCode] -> 
                case compile (cjmpLab, env, e) of
                  [used, env, eCode] -> [false, env, singletonBuffer (LABEL (sLab)) <+> sCode <+> label (eLab, eLabUsed) <+> eCode <+> label(cjmpLab, used) <+ CJMP ("nz", sLab)]
                esac
            esac
        esac
    | Call    (f, argExprs) ->
      case genLabel(env) of  
        [callLab, env] -> 
          case lookupFun(env, f) of 
            Fun (fLab, an) -> 
              case compileList (env, argExprs) of
                [_, env, code] ->
                  [false, env, code <+ (case fLab of Builtin (fLab) -> BUILTIN (fLab, an) | _ -> CALL (fLab, an) esac)]
              esac
          esac
      esac
    | Scope   (defs, expr)  ->
        case addDefs(beginScope(env), defs) of 
          [defsCode, env] -> 
            case compile(lab, rememberFunsForCompile(env, defs), expr) of 
              [scopeEndLabelUsed, env, code] -> 
                [scopeEndLabelUsed, endScope(env), defsCode <+> code]
            esac
        esac
    | String  (s)           -> [false, env, singletonBuffer (STRING (s))]
    | Array   (items)       ->
        case compileList (env, items) of
          [_, env, code] -> [false, env, singletonBuffer(CONST(size(items))) <+> code <+ ARRAY (size(items))]
        esac
    | ElemRef (arr, i)      ->
        case compileList (env, {arr, i}) of
          [_, env, code] -> [false, env, code]
        esac
    | Elem    (arr, i)      ->
        case compileList (env, {arr, i}) of
          [_, env, code] -> [false, env, code <+ ELEM]
        esac
    | Sexp    (name, items) ->
        case compileList (env, items) of
          [_, env, code] -> [false, env, singletonBuffer(CONST (size (items) + 1)) <+> code <+ SEXP (name, size (items))]
        esac
    | Set     (x, e)        -> compile (lab, env, Assn (Ref (x), e))
    esac
  }

  case initCompEnv()
    .beginScope
    .addFun ("read"  , Builtin("read")  , 0)
    .addFun ("write" , Builtin("write") , 1)
    .addFun ("length", Builtin("length"), 1)
    .genLabel of
      [endLab, env] ->
        case compile(endLab, env, stmt) of 
        [endLabUsed, env, code] -> 
          case compileFuns(env) of 
            [funsCode, _] -> getBuffer $ singletonBuffer(LABEL("main")) <+ BEGIN("main", 0, getLocals(env)) <+> code <+> label (endLab, endLabUsed) <+ END <+> funsCode
          esac
        esac
  esac
}