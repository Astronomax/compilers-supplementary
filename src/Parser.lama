-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun buildBinop(l, op, r) {
  Binop(op, l, r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))}
                                 | x=lident  {Var (x)}
                                 | inbr[s("("), exp, s(")")]);

var exp = memo $ eta expr ({[Left, {[s ("!!"), buildBinop]}], 
                            [Left, {[s ("&&"), buildBinop]}], 
                            [Nona, {[s ("==") | s ("!=") | s ("<=") | s ("<") | s (">=") | s (">"), buildBinop]}], 
                            [Left, {[s ("+") | s ("-"), buildBinop]}], 
                            [Left, {[s ("*") | s ("/") | s ("%"), buildBinop]}]}, primary);

var basicStmt = memo $ eta syntax (to=lident s[":="] e=exp {Assn (to, e)}
                                   | -kSkip {Skip}
                                   | -kRead s=inbr[s("("), lident, s(")")] {Read (s)}
                                   | -kWrite e=inbr[s("("), exp, s(")")] {Write(e)}
                                   | -kIf e=exp -kThen s1=stmt s2=elseStmt -kFi {If (e, s1, s2)}
                                   | -kWhile e=exp -kDo s=stmt -kOd {While (e, s)}
                                   | -kDo s=stmt -kWhile e=exp -kOd {DoWhile (s, e)}
                                   | -kFor s1=stmt s[","] e=exp s[","] s2=stmt -kDo s3=stmt -kOd {Seq (s1, While (e, Seq(s3, s2)))});

var elseStmt = memo $ eta syntax (-kElse s=stmt {s}
                                  | -kElif e=exp -kThen s1=stmt s2=elseStmt {If (e, s1, s2)}
                                  | -empty {Skip});

var stmt = memo $ eta syntax (basicStmt
                              | s1=basicStmt s[";"] s2=stmt {Seq(s1, s2)});

-- Public top-level parser
public parse = stmt; 