-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun buildBinop(l, op, r) {
  Binop(op, l, r)
}

-- Primary expression
var primary = memo $ eta (syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}                |
                                 inbr[s("("), exp, s(")")]));

var exp = memo $ eta expr ({[Left, {[s ("!!"), buildBinop]}], 
                            [Left, {[s ("&&"), buildBinop]}], 
                            [Nona, {[s ("==") | s ("!=") | s ("<=") | s ("<") | s (">=") | s (">"), buildBinop]}], 
                            [Left, {[s ("+") | s ("-"), buildBinop]}], 
                            [Left, {[s ("*") | s ("/") | s ("%"), buildBinop]}]}, primary);

var basicStmt = memo $ eta (syntax (to=lident s[":="] e=exp {Assn (to, e)}           |
                                    -kSkip {Skip}                                    |
                                    -kRead s=inbr[s("("), lident, s(")")] {Read (s)} |
                                    -kWrite e=inbr[s("("), exp, s(")")] {Write(e)}));

var stmt = memo $ eta syntax (basicStmt |
                              s1=basicStmt s[";"] s2=stmt {Seq(s1, s2)});

-- Public top-level parser
public parse = stmt;