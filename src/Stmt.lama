-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[st, wrld], stmt) {
  case stmt of
    Assn(s, e) -> [st <- [s, evalExpr(st, e)], wrld]
    | Seq     (s1, s2)    -> eval(eval(c, s1), s2)
    | Skip                -> c
    | Read    (s)         -> (
      case readWorld(wrld) of 
       [v, nextwrld] -> [st <- [s, v], nextwrld] 
      esac
    )
    | Write   (e)         -> [st, writeWorld(evalExpr(st, e), wrld)]
    | If      (e, s1, s2) -> (
      case evalExpr(st, e) of 
        1 -> eval(c, s1)
      | 0 -> eval(c, s2)
      esac
    )
    | While   (e, s)      -> (
      case evalExpr(st, e) of 
        1 -> eval(eval(c, s), stmt)
      | 0 -> c
      esac
    )
    | DoWhile (s, e)      -> eval(eval(c, s), While (e, s))
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
